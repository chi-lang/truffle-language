package gh.marad.chi.language.nodes;

import gh.marad.chi.language.builtin.Builtin;
import gh.marad.chi.language.nodes.expr.BlockExpr;
import gh.marad.chi.language.nodes.expr.cast.CastToFloat;
import gh.marad.chi.language.nodes.expr.cast.CastToLongExpr;
import gh.marad.chi.language.nodes.expr.cast.CastToString;
import gh.marad.chi.language.nodes.expr.flow.IfExpr;
import gh.marad.chi.language.nodes.expr.flow.IsNode;
import gh.marad.chi.language.nodes.expr.flow.ReturnNode;
import gh.marad.chi.language.nodes.expr.flow.ReturnUnitNode;
import gh.marad.chi.language.nodes.expr.flow.effect.HandleEffectNode;
import gh.marad.chi.language.nodes.expr.flow.effect.InvokeEffect;
import gh.marad.chi.language.nodes.expr.flow.effect.ResumeNode;
import gh.marad.chi.language.nodes.expr.flow.loop.WhileBreakNode;
import gh.marad.chi.language.nodes.expr.flow.loop.WhileContinueNode;
import gh.marad.chi.language.nodes.expr.flow.loop.WhileExprNode;
import gh.marad.chi.language.nodes.expr.operators.arithmetic.*;
import gh.marad.chi.language.nodes.expr.operators.bit.BitAndOperator;
import gh.marad.chi.language.nodes.expr.operators.bit.BitOrOperator;
import gh.marad.chi.language.nodes.expr.operators.bit.ShlOperator;
import gh.marad.chi.language.nodes.expr.operators.bit.ShrOperator;
import gh.marad.chi.language.nodes.expr.operators.bool.*;
import gh.marad.chi.language.nodes.expr.variables.*;
import gh.marad.chi.language.nodes.function.DefinePackageFunction;
import gh.marad.chi.language.nodes.function.DefinePackageFunctionFromNode;
import gh.marad.chi.language.nodes.function.GetDefinedFunction;
import gh.marad.chi.language.nodes.function.InvokeFunction;
import gh.marad.chi.language.nodes.objects.ConstructChiObject;
import gh.marad.chi.language.nodes.objects.DefineVariantTypeNode;
import gh.marad.chi.language.nodes.objects.ReadMember;
import gh.marad.chi.language.nodes.objects.WriteMember;
import gh.marad.chi.language.nodes.value.*;

public interface ChiNodeVisitor {
    void visitUnitValue(UnitValue unitValue) throws Exception;
    void visitLongValue(LongValue longValue) throws Exception;
    void visitFloatValue(FloatValue floatValue) throws Exception;
    void visitStringValue(StringValue stringValue) throws Exception;
    void visitBooleanValue(BooleanValue booleanValue) throws Exception;
    void visitBuildInterpolatedString(BuildInterpolatedString buildInterpolatedString) throws Exception;
    void visitWriteLocalVariable(WriteLocalVariable writeLocalVariable) throws Exception;
    void visitReadModuleVariable(ReadModuleVariable readModuleVariable) throws Exception;
    void visitReadLocalVariable(ReadLocalVariable readLocalVariable) throws Exception;
    void visitReadOuterScopeVariable(ReadOuterScopeVariable readOuterScopeVariable) throws Exception;
    void visitReadLocalArgument(ReadLocalArgument readLocalArgument) throws Exception;
    void visitReadOuterScopeArgument(ReadOuterScopeArgument readOuterScopeArgument) throws Exception;
    void visitReadMember(ReadMember readMember) throws Exception;
    void visitWriteMember(WriteMember writeMember) throws Exception;
    void visitBlockExpr(BlockExpr blockExpr) throws Exception;
    void visitPlusOperator(PlusOperator plusOperator) throws Exception;
    void visitMinusOperator(MinusOperator minusOperator) throws Exception;
    void visitMultiplyOperator(MultiplyOperator multiplyOperator) throws Exception;
    void visitDivideOperator(DivideOperator divideOperator) throws Exception;
    void visitModuloOperator(ModuloOperator moduloOperator) throws Exception;
    void visitEqualOperator(EqualOperator equalOperator) throws Exception;
    void visitNotEqual(NotEqualOperator notEqualOperator) throws Exception;
    void visitLessThanOperator(LessThanOperator lessThanOperator) throws Exception;
    void visitGreaterThanOperator(GreaterThanOperator greaterThanOperator) throws Exception;
    void visitLogicAndOperator(LogicAndOperator logicAndOperator) throws Exception;
    void visitLogicOrOperator(LogicOrOperator logicOrOperator) throws Exception;
    void visitBitAndOperator(BitAndOperator bitAndOperator) throws Exception;
    void visitBitOrOperator(BitOrOperator bitOrOperator) throws Exception;
    void visitShlOperator(ShlOperator shlOperator) throws Exception;
    void visitShrOperator(ShrOperator shrOperator) throws Exception;
    void visitLogicNotOperator(LogicNotOperator logicNotOperator) throws Exception;
    void visitCastToLongExpr(CastToLongExpr castToLongExpr) throws Exception;
    void visitCastToFloat(CastToFloat castToFloat) throws Exception;
    void visitCastToString(CastToString castToString) throws Exception;
    void visitIfExpr(IfExpr ifExpr) throws Exception;
    void visitLambdaValue(LambdaValue lambdaValue) throws Exception;
    void visitDefineModuleVariable(DefineModuleVariable defineModuleVariable) throws Exception;
    void visitWriteModuleVariable(WriteModuleVariable writeModuleVariable) throws Exception;
    void visitWriteOuterVariable(WriteOuterVariable writeOuterVariable) throws Exception;
    void visitWriteLocalArgument(WriteLocalArgument writeLocalArgument) throws Exception;
    void visitInvokeFunction(InvokeFunction invokeFunction) throws Exception;
    void visitGetDefinedFunction(GetDefinedFunction getDefinedFunction) throws Exception;
    void visitWhileExprNode(WhileExprNode whileExprNode) throws Exception;
    void visitWhileBreakNode(WhileBreakNode whileBreakNode) throws Exception;
    void visitWhileContinueNode(WhileContinueNode whileContinueNode) throws Exception;
    void visitIndexOperator(IndexOperatorNode indexOperatorNode) throws Exception;
    void visitIndexedAssignmentNode(IndexedAssignmentNode indexedAssignmentNode) throws Exception;
    void visitIs(IsNode isNode) throws Exception;
    void visitConstructChiObject(ConstructChiObject constructChiObject) throws Exception;
    void visitDefineVariantTypeNode(DefineVariantTypeNode defineVariantTypeNode) throws Exception;
    void visitDefinePackageFunction(DefinePackageFunctionFromNode definePackageFunctionFromNode) throws Exception;
    void visitDefinePackageFunction(DefinePackageFunction definePackageFunction) throws Exception;
    void visitInvokeEffect(InvokeEffect invokeEffect) throws Exception;
    void visitHandleEffect(HandleEffectNode visitor) throws Exception;
    void visitResumeNode(ResumeNode resumeNode) throws Exception;
    void visitBuiltin(Builtin builtin) throws Exception;
    void visitReturnNode(ReturnNode returnNode) throws Exception;
    void visitReturnUnitNode(ReturnUnitNode returnUnitNode) throws Exception;

}
